trigger:
- main
- dev
- QA

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  environment : 'development'
  buildConfiguration: 'Release'
    

steps:



- task: Bash@3
  inputs:
    filePath: '1.sh'
    arguments: '$(Build.SourceBranchName)'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      env="$(./1.sh $(Build.SourceBranchName))"
      echo "##vso[task.setvariable variable=env]$env"

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      echo $(env)
      
    
# stages:
#   - stage: BuildStage
#     displayName: 'Build'
#     jobs:
#       - job: Buildjob
#         steps:
        

#         - task: DotNetCoreCLI@2
#           displayName: 'Restore Nuget' 
#           inputs:
#             command: 'restore'
#             projects: '$(solution)'
#             feedsToUse: 'select'

#         - task: DotNetCoreCLI@2
#           displayName: 'Build solution' 
#           inputs:
#             projects: '$(solution)'
#             command: 'build'
#             arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

#         - task: DotNetCoreCLI@2
#           displayName: 'Run tests'
#           inputs:
#             command: 'test'
#             projects: 'TestProject\TestProject.csproj'
#             arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage"'      
#         - task: PublishCodeCoverageResults@2
#           displayName: 'Publish code coverage' 
#           inputs:
#             failIfCoverageEmpty: true
#             summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

#         - task: DotNetCoreCLI@2
#           displayName: 'Publish solution' 
#           inputs:
#             projects: '$(solution)'
#             command: 'publish'
#             configuration: '--c $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#         - task: PublishPipelineArtifact@1
#           inputs:
#             targetPath: '$(Build.ArtifactStagingDirectory)'
#             artifact: 'drop'
#             publishLocation: 'pipeline'

#   - stage: DeployStageDev
#     displayName: 'Deploy Dev'
#     jobs:
#       - job:
#         steps:        
#         - task: DownloadPipelineArtifact@2
#           inputs:
#             buildType: 'current'
#             artifactName: 'drop'
#             targetPath: '$(Pipeline.Workspace)/drop'
#         - powershell: |
#             Compress-Archive -Path "$(Pipeline.Workspace)/drop/*" -DestinationPath "$(Pipeline.Workspace)/drop.zip" -Force

#         - task: AzureRmWebAppDeployment@4
#           inputs:
#             ConnectionType: 'AzureRM'
#             azureSubscription: 'DevopsLearnAppService'
#             appType: 'webApp'
#             WebAppName: 'Dev-DevOpsLearn'
#             packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
#   - template: 'QA-Prod-temp.yml'
#     parameters:
#       environment: 'QA'
#       appservice: 'QA-DevopsLearn'
#   - template: 'QA-Prod-temp.yml'
    # parameters:
    #   environment: 'Production'
    #   appservice: 'Prod-DevopsLearn'

