trigger:
- main
- dev
- QA


pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  environment: 'development'
  buildConfiguration: 'Release'
    
stages:
  - stage: BuildStage
    displayName: 'Build'
    jobs:
      - job: Buildjob
        steps:
        - task: DotNetCoreCLI@2
          displayName: 'Restore Nuget' 
          inputs:
            command: 'restore'
            projects: '$(solution)'
            feedsToUse: 'select'
        - task: DotNetCoreCLI@2
          displayName: 'Build solution' 
          inputs:
            projects: '$(solution)'
            command: 'build'
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: 'Run tests'
          inputs:
            command: 'test'
            projects: 'TestProject\TestProject.csproj'
            arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage"'      
        - task: PublishCodeCoverageResults@2
          displayName: 'Publish code coverage' 
          inputs:
            failIfCoverageEmpty: true
            summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

        - task: DotNetCoreCLI@2
          displayName: 'Publish solution' 
          inputs:
            projects: '$(solution)'
            command: 'publish'
            arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifact: 'drop'
            publishLocation: 'pipeline'

  - stage: ChooseEnvStage
    dependsOn: BuildStage
    displayName: 'Choose env'
    jobs:
     - job: ChooseEnvJob
       steps:
        - task: Bash@3
          name: storeenvvalue
          inputs:
                targetType: 'inline'
                script: |
                  env="$(./1.sh env $(Build.SourceBranchName))"
                  echo "##vso[task.setvariable variable=env;isOutput=true]$env"       
        - task: Bash@3
          name: storeappservicevalue
          inputs:
                targetType: 'inline'
                script: |
                  appservice="$(./1.sh appservice $(Build.SourceBranchName))"
                  echo "##vso[task.setvariable variable=appservice;isOutput=true]$appservice"       
  
  - template: 'QA-Prod-temp.yml'
