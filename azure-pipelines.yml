trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
  - stage: BuildStage
    displayName: 'Build'
    jobs:
      - job: Buildjob
        steps:
        
        - task: DotNetCoreCLI@2
          displayName: 'Restore Nuget' 
          inputs:
            command: 'restore'
            projects: '**/*.csproj'
            feedsToUse: 'select'

        - task: DotNetCoreCLI@2
          displayName: 'Build solution' 
          inputs:
            projects: '**/*.csproj'
            command: 'build'
            arguments: '--configuration $(buildConfiguration) '
        - script: |
            echo "Structure of work folder of this pipeline:"
            tree $(build.sourcesdirectory)
            echo "Build.ArtifactsDirectory:" 
            echo $(build.sourcesdirectory)
          
        - task: DotNetCoreCLI@2
          displayName: 'Run tests'
          inputs:
            command: 'test'
            projects: 'TestProject\TestProject.csproj'
            arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'      
        - task: PublishCodeCoverageResults@2
          displayName: 'Publish code coverage' 
          inputs:
            failIfCoverageEmpty: true
            summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

        - task: DotNetCoreCLI@2
          displayName: 'Publish solution' 
          inputs:
            command: 'publish'
            publishWebProjects: true
            arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifact: 'drop'
            publishLocation: 'pipeline'

  - stage: DeployStageDev
    displayName: 'Deploy Dev'
    jobs:
      - job:
        steps:        
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'current'
            artifactName: 'drop'
            targetPath: '$(Pipeline.Workspace)/drop'

        - task: AzureRmWebAppDeployment@4
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: 'DevopsLearnAppService'
            appType: 'webApp'
            WebAppName: 'Dev-DevOpsLearn'
            packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
  # - template: 'QA-Prod-temp.yml'
  #   parameters:
  #     environment: 'QA'
  #     appservice: 'QA-DevopsLearn'
  # - template: 'QA-Prod-temp.yml'
  #   parameters:
  #     environment: 'Production'
  #     appservice: 'Prod-DevopsLearn'
